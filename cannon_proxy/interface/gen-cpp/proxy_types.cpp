/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "proxy_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace paradigm4 { namespace cannon_proxy {

int _kItemStatusValues[] = {
  ItemStatus::FOUND,
  ItemStatus::NOT_FOUND,
  ItemStatus::ERROR
};
const char* _kItemStatusNames[] = {
  "FOUND",
  "NOT_FOUND",
  "ERROR"
};
const std::map<int, const char*> _ItemStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kItemStatusValues, _kItemStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kStatusValues[] = {
  Status::OK,
  Status::PARTIAL_OK,
  Status::ERROR
};
const char* _kStatusNames[] = {
  "OK",
  "PARTIAL_OK",
  "ERROR"
};
const std::map<int, const char*> _Status_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kStatusValues, _kStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


CannonRequest::~CannonRequest() throw() {
}


void CannonRequest::__set_keys(const std::vector<int64_t> & val) {
  this->keys = val;
}

uint32_t CannonRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->keys.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->keys.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->keys[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CannonRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CannonRequest");

  xfer += oprot->writeFieldBegin("keys", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->keys.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->keys.begin(); _iter5 != this->keys.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CannonRequest &a, CannonRequest &b) {
  using ::std::swap;
  swap(a.keys, b.keys);
  swap(a.__isset, b.__isset);
}

CannonRequest::CannonRequest(const CannonRequest& other6) {
  keys = other6.keys;
  __isset = other6.__isset;
}
CannonRequest& CannonRequest::operator=(const CannonRequest& other7) {
  keys = other7.keys;
  __isset = other7.__isset;
  return *this;
}
void CannonRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CannonRequest(";
  out << "keys=" << to_string(keys);
  out << ")";
}


ValueItem::~ValueItem() throw() {
}


void ValueItem::__set_status(const ItemStatus::type val) {
  this->status = val;
}

void ValueItem::__set_value(const double val) {
  this->value = val;
}

uint32_t ValueItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->status = (ItemStatus::type)ecast8;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ValueItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ValueItem");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ValueItem &a, ValueItem &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

ValueItem::ValueItem(const ValueItem& other9) {
  status = other9.status;
  value = other9.value;
  __isset = other9.__isset;
}
ValueItem& ValueItem::operator=(const ValueItem& other10) {
  status = other10.status;
  value = other10.value;
  __isset = other10.__isset;
  return *this;
}
void ValueItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ValueItem(";
  out << "status=" << to_string(status);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


CannonResponse::~CannonResponse() throw() {
}


void CannonResponse::__set_status(const Status::type val) {
  this->status = val;
}

void CannonResponse::__set_values(const std::vector<ValueItem> & val) {
  this->values = val;
}

uint32_t CannonResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->status = (Status::type)ecast11;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->values.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->values[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CannonResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CannonResponse");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->values.size()));
    std::vector<ValueItem> ::const_iterator _iter17;
    for (_iter17 = this->values.begin(); _iter17 != this->values.end(); ++_iter17)
    {
      xfer += (*_iter17).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CannonResponse &a, CannonResponse &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

CannonResponse::CannonResponse(const CannonResponse& other18) {
  status = other18.status;
  values = other18.values;
  __isset = other18.__isset;
}
CannonResponse& CannonResponse::operator=(const CannonResponse& other19) {
  status = other19.status;
  values = other19.values;
  __isset = other19.__isset;
  return *this;
}
void CannonResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CannonResponse(";
  out << "status=" << to_string(status);
  out << ", " << "values=" << to_string(values);
  out << ")";
}

}} // namespace
