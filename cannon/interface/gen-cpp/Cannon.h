/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Cannon_H
#define Cannon_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cannon_types.h"

namespace paradigm4 { namespace cannon {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CannonIf {
 public:
  virtual ~CannonIf() {}
  virtual void get(CannonResponse& _return, const CannonRequest& req) = 0;
};

class CannonIfFactory {
 public:
  typedef CannonIf Handler;

  virtual ~CannonIfFactory() {}

  virtual CannonIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CannonIf* /* handler */) = 0;
};

class CannonIfSingletonFactory : virtual public CannonIfFactory {
 public:
  CannonIfSingletonFactory(const boost::shared_ptr<CannonIf>& iface) : iface_(iface) {}
  virtual ~CannonIfSingletonFactory() {}

  virtual CannonIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CannonIf* /* handler */) {}

 protected:
  boost::shared_ptr<CannonIf> iface_;
};

class CannonNull : virtual public CannonIf {
 public:
  virtual ~CannonNull() {}
  void get(CannonResponse& /* _return */, const CannonRequest& /* req */) {
    return;
  }
};

typedef struct _Cannon_get_args__isset {
  _Cannon_get_args__isset() : req(false) {}
  bool req :1;
} _Cannon_get_args__isset;

class Cannon_get_args {
 public:

  Cannon_get_args(const Cannon_get_args&);
  Cannon_get_args& operator=(const Cannon_get_args&);
  Cannon_get_args() {
  }

  virtual ~Cannon_get_args() throw();
  CannonRequest req;

  _Cannon_get_args__isset __isset;

  void __set_req(const CannonRequest& val);

  bool operator == (const Cannon_get_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const Cannon_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cannon_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Cannon_get_pargs {
 public:


  virtual ~Cannon_get_pargs() throw();
  const CannonRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cannon_get_result__isset {
  _Cannon_get_result__isset() : success(false) {}
  bool success :1;
} _Cannon_get_result__isset;

class Cannon_get_result {
 public:

  Cannon_get_result(const Cannon_get_result&);
  Cannon_get_result& operator=(const Cannon_get_result&);
  Cannon_get_result() {
  }

  virtual ~Cannon_get_result() throw();
  CannonResponse success;

  _Cannon_get_result__isset __isset;

  void __set_success(const CannonResponse& val);

  bool operator == (const Cannon_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Cannon_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cannon_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Cannon_get_presult__isset {
  _Cannon_get_presult__isset() : success(false) {}
  bool success :1;
} _Cannon_get_presult__isset;

class Cannon_get_presult {
 public:


  virtual ~Cannon_get_presult() throw();
  CannonResponse* success;

  _Cannon_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CannonClient : virtual public CannonIf {
 public:
  CannonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CannonClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(CannonResponse& _return, const CannonRequest& req);
  void send_get(const CannonRequest& req);
  void recv_get(CannonResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CannonProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CannonIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CannonProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CannonProcessor(boost::shared_ptr<CannonIf> iface) :
    iface_(iface) {
    processMap_["get"] = &CannonProcessor::process_get;
  }

  virtual ~CannonProcessor() {}
};

class CannonProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CannonProcessorFactory(const ::boost::shared_ptr< CannonIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CannonIfFactory > handlerFactory_;
};

class CannonMultiface : virtual public CannonIf {
 public:
  CannonMultiface(std::vector<boost::shared_ptr<CannonIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CannonMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CannonIf> > ifaces_;
  CannonMultiface() {}
  void add(boost::shared_ptr<CannonIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(CannonResponse& _return, const CannonRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, req);
    }
    ifaces_[i]->get(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CannonConcurrentClient : virtual public CannonIf {
 public:
  CannonConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CannonConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(CannonResponse& _return, const CannonRequest& req);
  int32_t send_get(const CannonRequest& req);
  void recv_get(CannonResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

}} // namespace

#endif
