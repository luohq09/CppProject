/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com._4paradigm.cannon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-01")
public class CannonResponse implements org.apache.thrift.TBase<CannonResponse, CannonResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CannonResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CannonResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField VALUE_STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("valueStatuses", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField VALUES_FIELD_DESC = new org.apache.thrift.protocol.TField("values", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CannonResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CannonResponseTupleSchemeFactory());
  }

  /**
   * 
   * @see Status
   */
  public Status status; // required
  public List<ItemStatus> valueStatuses; // required
  public ByteBuffer values; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see Status
     */
    STATUS((short)1, "status"),
    VALUE_STATUSES((short)2, "valueStatuses"),
    VALUES((short)3, "values");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // VALUE_STATUSES
          return VALUE_STATUSES;
        case 3: // VALUES
          return VALUES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    tmpMap.put(_Fields.VALUE_STATUSES, new org.apache.thrift.meta_data.FieldMetaData("valueStatuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ItemStatus.class))));
    tmpMap.put(_Fields.VALUES, new org.apache.thrift.meta_data.FieldMetaData("values", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CannonResponse.class, metaDataMap);
  }

  public CannonResponse() {
  }

  public CannonResponse(
    Status status,
    List<ItemStatus> valueStatuses,
    ByteBuffer values)
  {
    this();
    this.status = status;
    this.valueStatuses = valueStatuses;
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CannonResponse(CannonResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetValueStatuses()) {
      List<ItemStatus> __this__valueStatuses = new ArrayList<ItemStatus>(other.valueStatuses.size());
      for (ItemStatus other_element : other.valueStatuses) {
        __this__valueStatuses.add(other_element);
      }
      this.valueStatuses = __this__valueStatuses;
    }
    if (other.isSetValues()) {
      this.values = org.apache.thrift.TBaseHelper.copyBinary(other.values);
    }
  }

  public CannonResponse deepCopy() {
    return new CannonResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.valueStatuses = null;
    this.values = null;
  }

  /**
   * 
   * @see Status
   */
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public CannonResponse setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getValueStatusesSize() {
    return (this.valueStatuses == null) ? 0 : this.valueStatuses.size();
  }

  public java.util.Iterator<ItemStatus> getValueStatusesIterator() {
    return (this.valueStatuses == null) ? null : this.valueStatuses.iterator();
  }

  public void addToValueStatuses(ItemStatus elem) {
    if (this.valueStatuses == null) {
      this.valueStatuses = new ArrayList<ItemStatus>();
    }
    this.valueStatuses.add(elem);
  }

  public List<ItemStatus> getValueStatuses() {
    return this.valueStatuses;
  }

  public CannonResponse setValueStatuses(List<ItemStatus> valueStatuses) {
    this.valueStatuses = valueStatuses;
    return this;
  }

  public void unsetValueStatuses() {
    this.valueStatuses = null;
  }

  /** Returns true if field valueStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetValueStatuses() {
    return this.valueStatuses != null;
  }

  public void setValueStatusesIsSet(boolean value) {
    if (!value) {
      this.valueStatuses = null;
    }
  }

  public byte[] getValues() {
    setValues(org.apache.thrift.TBaseHelper.rightSize(values));
    return values == null ? null : values.array();
  }

  public ByteBuffer bufferForValues() {
    return org.apache.thrift.TBaseHelper.copyBinary(values);
  }

  public CannonResponse setValues(byte[] values) {
    this.values = values == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(values, values.length));
    return this;
  }

  public CannonResponse setValues(ByteBuffer values) {
    this.values = org.apache.thrift.TBaseHelper.copyBinary(values);
    return this;
  }

  public void unsetValues() {
    this.values = null;
  }

  /** Returns true if field values is set (has been assigned a value) and false otherwise */
  public boolean isSetValues() {
    return this.values != null;
  }

  public void setValuesIsSet(boolean value) {
    if (!value) {
      this.values = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    case VALUE_STATUSES:
      if (value == null) {
        unsetValueStatuses();
      } else {
        setValueStatuses((List<ItemStatus>)value);
      }
      break;

    case VALUES:
      if (value == null) {
        unsetValues();
      } else {
        setValues((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case VALUE_STATUSES:
      return getValueStatuses();

    case VALUES:
      return getValues();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case VALUE_STATUSES:
      return isSetValueStatuses();
    case VALUES:
      return isSetValues();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CannonResponse)
      return this.equals((CannonResponse)that);
    return false;
  }

  public boolean equals(CannonResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_valueStatuses = true && this.isSetValueStatuses();
    boolean that_present_valueStatuses = true && that.isSetValueStatuses();
    if (this_present_valueStatuses || that_present_valueStatuses) {
      if (!(this_present_valueStatuses && that_present_valueStatuses))
        return false;
      if (!this.valueStatuses.equals(that.valueStatuses))
        return false;
    }

    boolean this_present_values = true && this.isSetValues();
    boolean that_present_values = true && that.isSetValues();
    if (this_present_values || that_present_values) {
      if (!(this_present_values && that_present_values))
        return false;
      if (!this.values.equals(that.values))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    boolean present_valueStatuses = true && (isSetValueStatuses());
    list.add(present_valueStatuses);
    if (present_valueStatuses)
      list.add(valueStatuses);

    boolean present_values = true && (isSetValues());
    list.add(present_values);
    if (present_values)
      list.add(values);

    return list.hashCode();
  }

  @Override
  public int compareTo(CannonResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValueStatuses()).compareTo(other.isSetValueStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValueStatuses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valueStatuses, other.valueStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValues()).compareTo(other.isSetValues());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValues()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.values, other.values);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CannonResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valueStatuses:");
    if (this.valueStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.valueStatuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("values:");
    if (this.values == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.values, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CannonResponseStandardSchemeFactory implements SchemeFactory {
    public CannonResponseStandardScheme getScheme() {
      return new CannonResponseStandardScheme();
    }
  }

  private static class CannonResponseStandardScheme extends StandardScheme<CannonResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CannonResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = com._4paradigm.cannon.Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VALUE_STATUSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.valueStatuses = new ArrayList<ItemStatus>(_list0.size);
                ItemStatus _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = com._4paradigm.cannon.ItemStatus.findByValue(iprot.readI32());
                  struct.valueStatuses.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setValueStatusesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VALUES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.values = iprot.readBinary();
              struct.setValuesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CannonResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.valueStatuses != null) {
        oprot.writeFieldBegin(VALUE_STATUSES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.valueStatuses.size()));
          for (ItemStatus _iter3 : struct.valueStatuses)
          {
            oprot.writeI32(_iter3.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.values != null) {
        oprot.writeFieldBegin(VALUES_FIELD_DESC);
        oprot.writeBinary(struct.values);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CannonResponseTupleSchemeFactory implements SchemeFactory {
    public CannonResponseTupleScheme getScheme() {
      return new CannonResponseTupleScheme();
    }
  }

  private static class CannonResponseTupleScheme extends TupleScheme<CannonResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CannonResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetValueStatuses()) {
        optionals.set(1);
      }
      if (struct.isSetValues()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetValueStatuses()) {
        {
          oprot.writeI32(struct.valueStatuses.size());
          for (ItemStatus _iter4 : struct.valueStatuses)
          {
            oprot.writeI32(_iter4.getValue());
          }
        }
      }
      if (struct.isSetValues()) {
        oprot.writeBinary(struct.values);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CannonResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.status = com._4paradigm.cannon.Status.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.valueStatuses = new ArrayList<ItemStatus>(_list5.size);
          ItemStatus _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = com._4paradigm.cannon.ItemStatus.findByValue(iprot.readI32());
            struct.valueStatuses.add(_elem6);
          }
        }
        struct.setValueStatusesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.values = iprot.readBinary();
        struct.setValuesIsSet(true);
      }
    }
  }

}

